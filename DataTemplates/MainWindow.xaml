<Window x:Class="DataTemplates.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DataTemplates"
        xmlns:model="clr-namespace:DataTemplates.Model"
        mc:Ignorable="d"
        SizeToContent="WidthAndHeight"
        Title="MainWindow" MinHeight="350" MinWidth="525">
    <Window.Resources>
        <!-- For cleanliness and reusability, it's best to keep DataTemplates in external ResourceDictionaries.
             The line below imports our templates from FruitTemplates.xaml in the Resources folder.
        -->
        <ResourceDictionary Source="Resources\FruitTemplates.xaml" />
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="0.1*" />
            <RowDefinition />
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <!-- In most cases, these items would be generated by binding the ComboBox.ItemSource 
            to an IEnumerable ViewModel property and setting the ComboBox.DisplayMemberPath and 
            .ValueMemberPath attributes -->
        <ComboBox ItemsSource="{Binding Fruits}" SelectedValue="{Binding SelectedValue}" DisplayMemberPath="Name"
                  Grid.Row="0" />

        <!-- ContentControl is one handy way of working with DataTemplates.
        
        Notice that we bind the content directly to the SelectedValue property on the VM.  The ContentControl looks for a suitable
        template for the type, (in this case, they're imported in the Window.Resources) and uses that template to display the data.
        
        It's important to understand that the DataTemplate's DataContext is whatever the Content property is set to, for example
        if Apple is selected, the template's DataContext (i.e. for bindings, etc.) is an instance of type Apple, not the whole
        dataContext of the surrouding Window (which is MainViewModel).
        -->
        <!--<ContentControl Grid.Row="1" Content="{Binding SelectedValue}" />-->
        <ListBox Grid.Row="1" ItemsSource="{Binding Fruits}"/>
        <StackPanel Orientation="Horizontal" Grid.Row="2">

            <Button Content="Add Apple" x:Name="addApple" Click="AddApple_OnClick"/>
            <Button Content="Add Orange" x:Name="addOrange" Click="AddOrange_OnClick"/>
        </StackPanel>
    </Grid>
</Window>